services:
  rabbitmq:
    container_name: coach-bot-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - coach-bot-network

  api:
    container_name: coach-bot-api
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: "no"
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
    networks:
      - coach-bot-network
    command: [ "./wait-for-it.sh", "postgres", "uvicorn", "api.core.main:app", "--host", "0.0.0.0", "--port", "8000" ]

  worker:
    container_name: coach-bot-worker
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
    networks:
      - coach-bot-network
    environment:
      - RABBITMQ_HOST=rabbitmq

  postgres:
    container_name: coach-bot-postgres
    build:
      context: .
      dockerfile: docker/database/Dockerfile
    ports:
      - "5432:5432"
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./src/db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - coach-bot-network

  pgadmin:
    container_name: coach-bot-pgadmin
    image: dpage/pgadmin4
    env_file: .env
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
    networks:
      - coach-bot-network

  prometheus:
    container_name: coach-bot-prometheus
    build:
      context: .
      dockerfile: docker/monitoring/prometheus/Dockerfile
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      api:
        condition: service_healthy
      worker:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"

  loki:
    container_name: coach-bot-loki
    build:
      context: .
      dockerfile: docker/monitoring/loki/Dockerfile
    ports:
      - "3100:3100"
    volumes:
      - ./src/monitoring/loki:/etc/loki
      - loki_data:/loki
      - loki_wal:/wal
    command: -config.file=/etc/loki/loki-config.yml
    user: "root"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://loki:3100/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    container_name: coach-bot-grafana
    build:
      context: .
      dockerfile: docker/monitoring/grafana/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://grafana:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    container_name: coach-bot-frontend
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
    networks:
      - coach-bot-network

networks:
  coach-bot-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  loki_data:
  loki_wal:
  grafana_data:
  rabbitmq_logs:
